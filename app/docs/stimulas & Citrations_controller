with jsbundling-rails (esbuild) and cssbundling-rails, here’s the exact wiring you need so Stimulus + your citations_controller.js work cleanly.

1) File layout (expected)
app/javascript/
  application.js          # main JS entrypoint (esbuild bundles this)
  controllers/
    index.js              # registers Stimulus controllers
    citations_controller.js
app/assets/builds/
  application.js          # built output (esbuild writes here)
  application.css         # built output (postcss/sass writes here)

2) application.js — must import controllers
// app/javascript/application.js
import "@hotwired/turbo-rails"
import { Application } from "@hotwired/stimulus"

const application = Application.start()

// Load your controllers
import "./controllers"

export { application }

3) controllers/index.js — single clean bootstrap (no duplicates)
// app/javascript/controllers/index.js
import { Application } from "@hotwired/stimulus"
import CitationsController from "./citations_controller"

const application = Application.start()
application.register("citations", CitationsController)

export { application }


If you had two Application.start() calls or two imports, delete the extras.

4) citations_controller.js (your version is good)
// app/javascript/controllers/citations_controller.js
import { Controller } from "@hotwired/stimulus"

export default class extends Controller {
  static targets = ["list", "template"]
  static values = { index: Number }

  connect() { if (this.indexValue == null) this.indexValue = this._nextIndex() }

  add(e) {
    e.preventDefault()
    const html = this.templateTarget.innerHTML.replaceAll("NEW_RECORD", this.indexValue)
    this.listTarget.insertAdjacentHTML("beforeend", html)
    this.indexValue++
  }

  remove(e) {
    e.preventDefault()
    const wrapper = e.currentTarget.closest("[data-citations-wrapper]")
    const destroyField = wrapper.querySelector("input[name*='[_destroy]']")
    if (destroyField) { destroyField.value = "1"; wrapper.style.display = "none" } else { wrapper.remove() }
  }

  _nextIndex() { return this.listTarget.querySelectorAll("[data-citations-wrapper]").length }
}

5) Hook it up in the form (targets + template)

Example wrapper around your citations in the form (Articles/Soldiers):

<div data-controller="citations"
     data-citations-index-value="<%= @record.citations.size %>">
  <div data-citations-target="list">
    <%= f.fields_for :citations do |cf| %>
      <div data-citations-wrapper>
        <%= render "citations/fields", f: cf, sources: Source.order(:title) %>
        <button type="button" data-action="citations#remove">Remove</button>
      </div>
    <% end %>
  </div>

  <template data-citations-target="template">
    <div data-citations-wrapper>
      <%= f.fields_for :citations, Citation.new, child_index: "NEW_RECORD" do |cf| %>
        <%= render "citations/fields", f: cf, sources: Source.order(:title) %>
        <button type="button" data-action="citations#remove">Remove</button>
      <% end %>
    </div>
  </template>

  <p><button type="button" data-action="citations#add">Add citation</button></p>
</div>

6) Layout must include the built assets

In app/views/layouts/application.html.erb you should see:

<%= stylesheet_link_tag "application", "data-turbo-track": "reload" %>
<%= javascript_include_tag "application", "data-turbo-track": "reload", defer: true %>


(For jsbundling-rails & cssbundling-rails, these tags read from app/assets/builds/.)

7) package.json scripts (defaults)

Make sure you have:

{
  "scripts": {
    "build": "esbuild app/javascript/application.js --bundle --outdir=app/assets/builds --sourcemap",
    "build:css": "postcss app/assets/stylesheets/application.css -o app/assets/builds/application.css",
    "watch": "esbuild app/javascript/application.js --bundle --outdir=app/assets/builds --sourcemap --watch",
    "watch:css": "postcss app/assets/stylesheets/application.css -o app/assets/builds/application.css --watch"
  }
}

8) Run the dev processes

Use the foreman-style runner so both watchers start:

bin/dev


You should see 2 panes (js + css). If you edit a controller, the js watcher should rebuild and log a successful bundle (no “Could not resolve…”).

9) Quick troubleshooting checklist

Still seeing “Could not resolve './citations_controller'”

Confirm file path: app/javascript/controllers/citations_controller.js

Confirm spelling/case matches the import exactly.

Restart bin/dev after major file moves/renames.

Controller not connecting

Ensure application.js imports ./controllers.

Verify your HTML has data-controller="citations".

Add a console.log("Citations connected") in connect() to confirm.

ERB renders but Add/Remove no-op

Check that the wrapper/targets match list/template names.

Make sure the remove button has data-action="citations#remove".

Make sure nested partial includes a hidden _destroy field if you want soft-delete:

<%= f.hidden_field :_destroy %>